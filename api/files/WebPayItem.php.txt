<?php
// WebPayItem class is not included in Svea namespace 

include_once SVEA_REQUEST_DIR . "/Includes.php";

/**
 * The WebPayItem class provides entrypoint methods to the different row items 
 * that make up an order, as well as the customer identity information items.
 * 
 * @api
 * @author Kristian Grossman-Madsen
 */
class WebPayItem {

    /**
     * Use the OrderRow class for all kinds of products and other items. It is required to have a minimum of one order row.
     * 
     * Specify the price using precisely two of these methods in order to specify the item price and tax rate: 
     * setAmountExVat(), setAmountIncVat() and setVatPercent(). We recommend using setAmountExVat() and setVatPercentage().
     * 
     * If you use setAmountIncVat(), note that this may introduce a cumulative rounding error when ordering large
     * quantities of an item, as the package bases the total order sum on a calculated price ex. vat.
     *  
     *      $order->addOrderRow(
     *         WebPayItem::orderRow()
     *            ->setAmountExVat(100.00)          // optional, need to use two out of three of the price specification methods, recommended
     *            ->setVatPercent(25)               // optional, need to use two out of three of the price specification methods, recommended
     *            ->setAmountIncVat(125.00)         // optional, need to use two out of three of the price specification methods
     *            ->setQuantity(2)                  // required
     *            ->setUnit("st")                   // optional
     *            ->setName('Prod')                 // optional, invoice and payment plan orders will merge "name" into "description" 
     *            ->setDescription("Specification") // optional, invoice and payment plan orders will merge "name" into "description" 
     *            ->setArticleNumber("1")           // optional
     *            ->setDiscountPercent(0)           // optional
     *      );
     * 
     * @return \Svea\OrderRow
     */
     public static function orderRow() {
         return new Svea\OrderRow();
    }

    /**
     * Use this only when supplying NumberedOrderRow items for the various WebPayAdmin order row administration functions.
     * @return \Svea\NumberedOrderRow
     */
     public static function numberedOrderRow() {
         return new Svea\NumberedOrderRow();
    }
    
    
    /*
     * Use this class to add shipping to the order.
     * 
     * Specify the price using precisely two of these methods in order to specify the item price and tax rate: 
     * setAmountExVat(), setAmountIncVat() and setVatPercent().
     * 
     *      $order->addFee(
     *          WebPayItem::shippingFee()
     *              ->setShippingId('33')                   // optional
     *              ->setName('shipping')                   // optional
     *              ->setDescription("Specification")       // optional
     *              ->setAmountExVat(50)                    // recommended to specify price using AmountExVat & VatPercent
     *              ->setVatPercent(25)                     // recommended to specify price using AmountExVat & VatPercent
     *              ->setAmountIncVat(62.50)                // optional, need to use two out of three of the price specification methods
     *              ->setUnit("st")                         // optional
     *              ->setDiscountPercent(0)                 // optional
     *      );
     * 
     * @return \Svea\ShippingFee
     */
    public static function shippingFee() {
        return new Svea\ShippingFee();
    }

    /**
     * @return \Svea\InvoiceFee
     */
    public static function invoiceFee() {
        return new Svea\InvoiceFee();
    }

    /**
     * 
     * @return \Svea\FixedDiscount
     */
    public static function fixedDiscount() {
        return new Svea\FixedDiscount();
    }

    /**
     * 
     * @return \Svea\RelativeDiscount
     */
    public static function relativeDiscount() {
        return new Svea\RelativeDiscount();
    }

    /**
     * 
     * @return \Svea\IndividualCustomer
     */
    public static function individualCustomer() {
        return new Svea\IndividualCustomer();
    }

    /**
     * 
     * @return \Svea\CompanyCustomer
     */
    public static function companyCustomer() {
        return new Svea\CompanyCustomer();
    }
}

